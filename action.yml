name: "Coverity Analsysis by using cov-capture as capture command."
description: "Will analyze the source code with Coverity Connect."
author: Jouni Lehto
branding:
  icon: code
  color: blue
inputs:
  log_level:
    description: Logging level
    default: DEBUG
    required: false
  teams_webhook_url:
    description: Microsoft Teams WebHook URL. By giving this, the Teams notification is activated
    required: false
  force_commit:
    description: Setting this true, it will do the commit and will not do any checkings.
    default: false
    required: false
  dryrun:
    description: Set this true, if you want to run tests and not to do the commit.
    default: false
    required: false
  break_build:
    description: Set this true, if you want to break the build, if there are new findings.
    default: false
    required: false
  emit_threshold:
    description: With this you can set the emit threshold, the default is 95
    default: '95'
    required: false
  viewID:
    description: ID of that view which result is used to get findings
    required: false
  cov_capture_mode:
    description: Which cov-capture mode is used. Options are project, scm, source (default) and config
    required: false
    default: source
  cov_capture_source:
    description: Source folder where capture will be started or SCM URL
    required: false
    default: ${{github.workspace}}
  cov_capture_params:
    description: Additional parameters for cov-capture phase
    required: false
    default: --no-security-da
  cov_analysis_params:
    description: Additional parameters for cov-analyze phase
    required: false
    default: --webapp-security --security --strip-path=${{github.workspace}} -en HARDCODED_CREDENTIALS
  cov_incremental_analysis_params:
    description: Additional parameters for cov-run-desktop phase
    required: false
    default: --set-new-defect-owner false --whole-program --ignore-uncapturable-inputs true --reference-snapshot="latest" --present-in-reference false --webapp-security --security --strip-path=${{github.workspace}} -en HARDCODED_CREDENTIALS
  cov_analysis_mode:
    description: Analysis mode will tell the action that is full or incremental analysis requested, Options are full and incremental
    required: false
    default: full
  github_access_token:
    description: This is required when using incremental analysis mode. This is used to get modified files via Github Api
    required: false

runs:
  using: composite
  steps:
    # Run the Coverity capture phase with cov-build
    - name: Capture phase with SCM mode
      if: ${{inputs.cov_capture_mode == 'scm'}}
      run: cov-capture --dir ${{env.cov_intermediate_dir}} ${{inputs.cov_capture_params}} --scm-url=${{inputs.cov_capture_source}}
      shell: bash
    - name: Capture phase with Project mode
      if: ${{inputs.cov_capture_mode != 'scm'}}
      run: cov-capture --dir ${{env.cov_intermediate_dir}} ${{inputs.cov_capture_params}} --${{inputs.cov_capture_mode}}-dir=${{inputs.cov_capture_source}}
      shell: bash
    # Run the Coverity Analysis
    - if: ${{inputs.cov_analysis_mode == 'full'}}
      run: cov-analyze --dir ${{env.cov_intermediate_dir}} ${{inputs.cov_analysis_params}}
      shell: bash
    - if: ${{inputs.cov_analysis_mode == 'incremental'}}
      run: |
        export mod_files=$(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{inputs.github_access_token}}" ${{github.api_url}}/repos/${{github.repository}}/commits/${{github.sha}} | jq .files | jq -r '.[] | .filename' | tr "\r\n" " ")
        if [[ ! -n "${mod_files// /}" ]]; then echo "No changed files that pass the filter. Exiting"; exit 0; fi
        cov-run-desktop --dir ${{env.cov_intermediate_dir}} ${{inputs.cov_incremental_analysis_params}} --url="${{env.cov_url}}" --stream="${{env.stream}}" --user="${{env.cov_username}}" --password="${{env.cov_password}}" --json-output-v10=${{env.cov_output}} $mod_files
      shell: bash
    - if: ${{env.cov_output_format == 'json' && inputs.cov_analysis_mode != 'incremental'}}
      run: cov-format-errors --dir ${{env.cov_intermediate_dir}} --json-output-v10 ${{env.cov_output}}
      shell: bash
    - if: ${{env.cov_output_format == 'html' }}
      run: cov-format-errors --dir ${{env.cov_intermediate_dir}} --html-output ${{env.cov_output}}
      shell: bash
    - if: ${{env.cov_output_format == 'sarif' && inputs.cov_analysis_mode != 'incremental'}}
      run: cov-format-errors --dir ${{env.cov_intermediate_dir}} --json-output-v10 ${{github.workspace}}/coverity_results.json
      shell: bash
    - if: ${{env.cov_output_format == 'sarif' }}
      uses: lejouni/coverity-sarif-formatter@v0.1.2
      with:
        log_level: ${{inputs.log_level}}
        inputfile: ${{github.workspace}}/coverity_results.json
        outputfile: ${{env.cov_output}}
    # Commit and that is done with coverity-commit-checker -action. In incremental case, we don't run commit phase -> results are available only locally. 
    - if: ${{inputs.cov_analysis_mode != 'incremental'}}
      name: Coverity Commit phase
      uses: lejouni/coverity-commit-checker@v5.6.2
      with:
        project: ${{env.project}}
        stream: ${{env.stream}}
        cov_username: ${{env.cov_username}}
        cov_password: ${{env.cov_password}}
        cov_url: ${{env.cov_url}}
        intermediate_dir: ${{env.cov_intermediate_dir}}
        log_level: ${{inputs.log_level}}
        teams_webhook_url: ${{inputs.teams_webhook_url}}
        force_commit: ${{inputs.force_commit}}
        dryrun: ${{inputs.dryrun}}
        break_build: ${{inputs.break_build}}
        emit_threshold: ${{inputs.emit_threshold}}
        viewID: ${{inputs.viewID}}

